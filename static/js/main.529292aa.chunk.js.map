{"version":3,"sources":["hooks/useCitiesList.js","components/Input/Input.jsx","components/Card/Card.jsx","hooks/useWeather.js","settings.js","components/CardList/CardList.jsx","App.js","reportWebVitals.js","index.js"],"names":["initialState","inputValue","editingCity","citiesList","JSON","parse","localStorage","getItem","orderBy","reducer","state","action","type","payload","newArray","filter","el","filterArray","Input","inputRef","useRef","useContext","GlobalContext","dispatch","className","onChange","event","target","value","ref","onClick","current","focus","length","Card","memo","city","data","useState","setData","useEffect","fetch","process","then","res","json","useWeather","name","weather","main","description","icon","temp","humidity","feels_like","src","alt","toFixed","CardList","setOrderBy","sortedList","sort","reverse","map","React","createContext","App","useReducer","setItem","stringify","useCitiesList","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.529292aa.chunk.js","sourcesContent":["import { useEffect, useReducer } from \"react\";\r\n\r\nconst initialState = {\r\n  inputValue: \"\",\r\n  editingCity: \"\",\r\n  citiesList: JSON.parse(localStorage.getItem(\"citiesList\")) || [],\r\n  orderBy: \"name\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_CITY\": {\r\n      const newState = {\r\n        ...state,\r\n        citiesList: [...state.citiesList, action.payload],\r\n      }; //переопределяем citiesList на  [...state.citiesList, action.payload]\r\n      return newState;\r\n    }\r\n    case \"REMOVE_CITY_CARD\": {\r\n      const oldArray = state.citiesList;\r\n      const newArray = oldArray.filter((el) => el !== action.payload);\r\n      return { ...state, citiesList: newArray };\r\n    }\r\n    case \"EDIT_CITY_CARD\": {\r\n      return {\r\n        ...state,\r\n        inputValue: action.payload,\r\n        editingCity: action.payload,\r\n      };\r\n    }\r\n    case \"EDIT_CITY_DONE\": {\r\n      const { editingCity } = state;\r\n      const oldArray = state.citiesList;\r\n      const filterArray = oldArray.filter((el) => el !== editingCity);\r\n      const newArray = [...filterArray, action.payload];\r\n      return {\r\n        ...state,\r\n        citiesList: newArray,\r\n        inputValue: \"\",\r\n        editingCity: \"\",\r\n      };\r\n    }\r\n    case \"CHANGE_INPUT_VALUE\": {\r\n      return { ...state, inputValue: action.payload };\r\n    }\r\n    case \"RESET_INPUT\": {\r\n      return { ...state, inputValue: initialState.inputValue };\r\n    }\r\n    default:\r\n      return initialState;\r\n  }\r\n};\r\n\r\nexport const useCitiesList = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const { citiesList } = state;\r\n  useEffect(() => {\r\n    localStorage.setItem(\"citiesList\", JSON.stringify(citiesList));\r\n  }, [citiesList]);\r\n  return [state, dispatch];\r\n};\r\n","import React, { useRef, useContext } from \"react\";\r\nimport { GlobalContext } from \"../../App\";\r\nimport \"../../App.css\";\r\n\r\nexport const Input = () => {\r\n  const inputRef = useRef(null);\r\n  const {\r\n    dispatch,\r\n    state: { inputValue, editingCity },\r\n  } = useContext(GlobalContext);\r\n\r\n  const handleOnChange = (event) => {\r\n    dispatch({\r\n      type: \"CHANGE_INPUT_VALUE\",\r\n      payload: event.target.value,\r\n    });\r\n  };\r\n  const handleOnAdd = () => {\r\n    if (inputValue.length) {\r\n      dispatch({\r\n        type: \"ADD_CITY\",\r\n        payload: inputValue,\r\n      });\r\n      dispatch({\r\n        type: \"RESET_INPUT\",\r\n        payload: inputValue,\r\n      });\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  const clearInputValue = () => {\r\n    dispatch({\r\n      type: \"RESET_INPUT\",\r\n      payload: inputValue,\r\n    });\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const handleOnDone = () => {\r\n    inputRef.current.focus();\r\n    if (inputValue.length) {\r\n      dispatch({\r\n        type: \"EDIT_CITY_DONE\",\r\n        payload: inputValue,\r\n      });\r\n      dispatch({\r\n        type: \"RESET_INPUT\",\r\n        payload: inputValue,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div className='InputWrap'>\r\n      <input\r\n        className='Input'\r\n        onChange={handleOnChange}\r\n        value={inputValue}\r\n        ref={inputRef}\r\n      />\r\n      <button className='ButtonLeft' onClick={clearInputValue}>\r\n        Очистить\r\n      </button>\r\n      {editingCity ? (\r\n        <button className='Button' onClick={handleOnDone}>\r\n          Изменить\r\n        </button>\r\n      ) : (\r\n        <button className='Button' onClick={handleOnAdd}>\r\n          Добавить\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { memo, useContext } from \"react\";\r\nimport { useWeather } from \"../../hooks/useWeather\";\r\nimport { GlobalContext } from \"../../App\";\r\n\r\nimport \"../../App.css\";\r\n\r\nexport const Card = memo(({ city }) => {\r\n  const { dispatch } = useContext(GlobalContext);\r\n\r\n  const data = useWeather(city);\r\n\r\n  const removeCityCard = () => {\r\n    dispatch({\r\n      type: \"REMOVE_CITY_CARD\",\r\n      payload: city,\r\n    });\r\n  };\r\n\r\n  const editCityCard = () => {\r\n    dispatch({\r\n      type: \"EDIT_CITY_CARD\",\r\n      payload: city,\r\n    });\r\n  };\r\n\r\n  if (!data) return null;\r\n  const { name, weather, main } = data;\r\n  const { description, icon } = weather[0];\r\n  const { temp, humidity, feels_like } = main;\r\n  return (\r\n    <div className='Card'>\r\n      <div className='action-btn'>\r\n        <button onClick={editCityCard} className='delete-btn'>\r\n          Изменить\r\n        </button>\r\n        <button onClick={removeCityCard} className='delete-btn'>\r\n          X\r\n        </button>\r\n      </div>\r\n      <div className='MainInfo'>\r\n        <img\r\n          className='Icon'\r\n          src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n          alt='icon'\r\n        />\r\n        <div className='Title'>{name}</div>\r\n        <div className='Description'>{description}</div>\r\n        <div className='Temperature'>{temp.toFixed()}</div>\r\n      </div>\r\n      <div className='Information'>\r\n        <div>Humidity: {humidity}</div>\r\n        <div>Feels like: {feels_like}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { useEffect, useState } from \"react\";\r\nimport { API_KEY, API_URL } from \"../settings\";\r\n\r\nexport const useWeather = (city) => {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    fetch(\r\n      `${API_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang={ru}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then(setData);\r\n  }, [city]);\r\n  return data;\r\n};\r\n","const API_KEY = process.env.REACT_APP_API_KEY;\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nexport { API_KEY, API_URL };\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Card } from \"../Card/Card\";\r\nimport { GlobalContext } from \"../../App\";\r\nimport \"../../App.css\";\r\n\r\nexport const CardList = () => {\r\n  const [orderBy, setOrderBy] = useState(\"asc\");\r\n  const {\r\n    state: { citiesList },\r\n  } = useContext(GlobalContext);\r\n\r\n  const changeFilter = (event) => {\r\n    setOrderBy(event.target.value);\r\n  };\r\n\r\n  let sortedList = citiesList.sort();\r\n  if (orderBy === \"desc\") {\r\n    sortedList.reverse();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='filter'>\r\n        <select className='select' value={orderBy} onChange={changeFilter}>\r\n          <option value='asc'>С начала</option>\r\n          <option value='desc'>С конца</option>\r\n        </select>\r\n      </div>\r\n      <div className='CardList'>\r\n        {sortedList.map((city) => (\r\n          <Card key={city} city={city} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport { useCitiesList } from \"./hooks/useCitiesList\";\r\nimport { Input } from \"./components/Input/Input\";\r\nimport { CardList } from \"./components/CardList/CardList\";\r\n\r\nexport const GlobalContext = React.createContext();\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useCitiesList();\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch }}>\r\n      <div className='container'>\r\n        <div className='Main'>\r\n          <Input />\r\n          <CardList />\r\n        </div>\r\n      </div>\r\n    </GlobalContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}