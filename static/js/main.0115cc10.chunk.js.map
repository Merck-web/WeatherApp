{"version":3,"sources":["components/Input/Input.jsx","components/Card/Card.jsx","hooks/useWeather.js","settings.js","components/CardList/CardList.jsx","App.js","hooks/useCitiesList.js","reportWebVitals.js","index.js"],"names":["Input","setCitiesList","useState","inputValue","setInputValue","inputRef","useRef","className","onChange","event","target","value","ref","onClick","current","focus","curentArray","Card","data","city","setData","useEffect","fetch","process","then","res","json","useWeather","name","weather","main","description","icon","temp","humidity","feels_like","src","alt","toFixed","CardList","citiesList","map","App","JSON","parse","localStorage","getItem","setItem","stringify","useCitiesList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAIaA,EAAQ,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACtB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAWC,iBAAO,MAcxB,OACE,sBAAKC,UAAU,YAAf,UACE,uBACEA,UAAU,QACVC,SAjBiB,SAACC,GACtBL,EAAcK,EAAMC,OAAOC,QAiBvBA,MAAOR,EACPS,IAAKP,IAEP,wBAAQE,UAAU,SAASM,QAbP,WACtBT,EAAc,IACdC,EAASS,QAAQC,SAWf,8DAGA,wBAAQR,UAAU,SAASM,QArBT,WACpBZ,GAAc,SAACe,GAAD,4BAAqBA,GAArB,CAAkCb,OAChDE,EAASS,QAAQC,QACjBX,EAAc,KAkBZ,kEC1BOa,EAAO,SAAC,GAAc,IAC3BC,ECHkB,SAACC,GACzB,MAAwBjB,mBAAS,MAAjC,mBAAOgB,EAAP,KAAaE,EAAb,KAQA,OAPAC,qBAAU,WACRC,MAAM,GAAD,OCLOC,0CDKP,sBACqBJ,EADrB,kBCNOI,mCDMP,4BAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,KAAKJ,KACP,CAACD,IACGD,EDNMS,CADmB,EAAXR,MAErB,IAAKD,EAAM,OAAO,KAClB,IAAQU,EAAwBV,EAAxBU,KAAMC,EAAkBX,EAAlBW,QAASC,EAASZ,EAATY,KACvB,EAA8BD,EAAQ,GAA9BE,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KACbC,EAA+BH,EAA/BG,KAAMC,EAAyBJ,EAAzBI,SAAUC,EAAeL,EAAfK,WACxB,OACE,sBAAK5B,UAAU,OAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBACEA,UAAU,OACV6B,IAAG,2CAAsCJ,EAAtC,WACHK,IAAI,SAEN,qBAAK9B,UAAU,QAAf,SAAwBqB,IACxB,qBAAKrB,UAAU,cAAf,SAA8BwB,IAC9B,qBAAKxB,UAAU,cAAf,SAA8B0B,EAAKK,eAErC,sBAAK/B,UAAU,cAAf,UACE,6CAAgB2B,KAChB,+CAAkBC,YGrBbI,EAAW,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACzB,OACE,qBAAKjC,UAAU,WAAf,SACGiC,EAAWC,KAAI,SAACtB,GAAD,OACd,cAAC,EAAD,CAAiBA,KAAMA,GAAZA,SCSJuB,MAVf,WACE,MCN2B,WAC3B,MAAoCxC,mBAClCyC,KAAKC,MAAMC,aAAaC,QAAQ,gBAAkB,IADpD,mBAAON,EAAP,KAAmBvC,EAAnB,KAMA,OAHAoB,qBAAU,WACRwB,aAAaE,QAAQ,aAAcJ,KAAKK,UAAUR,MACjD,CAACA,IACG,CAACA,EAAYvC,GDDgBgD,GAApC,mBAAOT,EAAP,KAAmBvC,EAAnB,KACA,OACE,sBAAKM,UAAU,OAAf,UACE,cAAC,EAAD,CAAON,cAAeA,IACtB,qBAAKM,UAAU,WAAf,SAA2B,cAAC,EAAD,CAAUiC,WAAYA,UEAxCU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.0115cc10.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nimport \"../../App.css\";\r\n\r\nexport const Input = ({ setCitiesList }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const handleOnChange = (event) => {\r\n    setInputValue(event.target.value); //берем value из input в переменную inputValue\r\n  };\r\n  const handleOnClick = () => {\r\n    setCitiesList((curentArray) => [...curentArray, inputValue]); //создаем новый массив который наполняется предыдущим + новое значени inputValue\r\n    inputRef.current.focus();\r\n    setInputValue(\"\");\r\n  };\r\n  const clearInputValue = () => {\r\n    setInputValue(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div className='InputWrap'>\r\n      <input\r\n        className='Input'\r\n        onChange={handleOnChange}\r\n        value={inputValue}\r\n        ref={inputRef}\r\n      />\r\n      <button className='Button' onClick={clearInputValue}>\r\n        Очистить\r\n      </button>\r\n      <button className='Button' onClick={handleOnClick}>\r\n        Добавить\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useWeather } from \"../../hooks/useWeather\";\r\n\r\nimport \"../../App.css\";\r\n\r\nexport const Card = ({ city }) => {\r\n  const data = useWeather(city);\r\n  if (!data) return null;\r\n  const { name, weather, main } = data;\r\n  const { description, icon } = weather[0];\r\n  const { temp, humidity, feels_like } = main;\r\n  return (\r\n    <div className='Card'>\r\n      <div className='MainInfo'>\r\n        <img\r\n          className='Icon'\r\n          src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n          alt='icon'\r\n        />\r\n        <div className='Title'>{name}</div>\r\n        <div className='Description'>{description}</div>\r\n        <div className='Temperature'>{temp.toFixed()}</div>\r\n      </div>\r\n      <div className='Information'>\r\n        <div>Humidity: {humidity}</div>\r\n        <div>Feels like: {feels_like}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { API_KEY, API_URL } from \"../settings\";\r\n\r\nexport const useWeather = (city) => {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    fetch(\r\n      `${API_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang={ru}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then(setData);\r\n  }, [city]);\r\n  return data;\r\n};\r\n","const API_KEY = process.env.REACT_APP_API_KEY;\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nexport { API_KEY, API_URL };\r\n","import React from \"react\";\r\nimport { Card } from \"../Card/Card\";\r\nimport \"../../App.css\";\r\n\r\nexport const CardList = ({ citiesList }) => {\r\n  return (\r\n    <div className='CardList'>\r\n      {citiesList.map((city) => (\r\n        <Card key={city} city={city} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport { useCitiesList } from \"./hooks/useCitiesList\";\r\n\r\nimport { Input } from \"./components/Input/Input\";\r\nimport { CardList } from \"./components/CardList/CardList\";\r\n\r\nfunction App() {\r\n  const [citiesList, setCitiesList] = useCitiesList();\r\n  return (\r\n    <div className='Main'>\r\n      <Input setCitiesList={setCitiesList} />\r\n      <div className='CardList'>{<CardList citiesList={citiesList} />}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useCitiesList = () => {\r\n  const [citiesList, setCitiesList] = useState(\r\n    JSON.parse(localStorage.getItem(\"citiesList\")) || []\r\n  );\r\n  useEffect(() => {\r\n    localStorage.setItem(\"citiesList\", JSON.stringify(citiesList));\r\n  }, [citiesList]);\r\n  return [citiesList, setCitiesList];\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}