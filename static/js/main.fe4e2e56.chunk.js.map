{"version":3,"sources":["components/Input/Input.jsx","components/Card/Card.jsx","App.js","reportWebVitals.js","index.js"],"names":["Input","setCitiesList","useState","inputValue","setInputValue","inputRef","useRef","className","onChange","event","target","value","ref","onClick","current","focus","curentArray","Card","city","src","alt","App","citiesList","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAIaA,EAAQ,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACtB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAWC,iBAAO,MAcxB,OACE,sBAAKC,UAAU,YAAf,UACE,uBACEA,UAAU,QACVC,SAjBiB,SAACC,GACtBL,EAAcK,EAAMC,OAAOC,QAiBvBA,MAAOR,EACPS,IAAKP,IAEP,wBAAQE,UAAU,SAASM,QAbP,WACtBT,EAAc,IACdC,EAASS,QAAQC,SAWf,8DAGA,wBAAQR,UAAU,SAASM,QArBT,WACpBZ,GAAc,SAACe,GAAD,4BAAqBA,GAArB,CAAkCb,OAChDE,EAASS,QAAQC,QACjBX,EAAc,KAkBZ,kEC3BOa,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,sBAAKX,UAAU,OAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBACEA,UAAU,OACVY,IAAI,8CACJC,IAAI,SAEN,qBAAKb,UAAU,QAAf,SAAwBW,IACxB,qBAAKX,UAAU,cAAf,oBACA,qBAAKA,UAAU,cAAf,mBAEF,sBAAKA,UAAU,cAAf,UACE,+CACA,wDCESc,MAdf,WACE,MAAoCnB,mBAAS,IAA7C,mBAAOoB,EAAP,KAAmBrB,EAAnB,KACA,OACE,sBAAKM,UAAU,OAAf,UACE,cAAC,EAAD,CAAON,cAAeA,IACtB,qBAAKM,UAAU,WAAf,SACGe,EAAWC,KAAI,SAACL,GAAD,OACd,cAAC,EAAD,CAAiBA,KAAMA,GAAZA,YCDNM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fe4e2e56.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nimport \"../../App.css\";\r\n\r\nexport const Input = ({ setCitiesList }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const handleOnChange = (event) => {\r\n    setInputValue(event.target.value); //берем value из input в переменную inputValue\r\n  };\r\n  const handleOnClick = () => {\r\n    setCitiesList((curentArray) => [...curentArray, inputValue]); //создаем новый массив который наполняется предыдущим + новое значени inputValue\r\n    inputRef.current.focus();\r\n    setInputValue(\"\");\r\n  };\r\n  const clearInputValue = () => {\r\n    setInputValue(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div className='InputWrap'>\r\n      <input\r\n        className='Input'\r\n        onChange={handleOnChange}\r\n        value={inputValue}\r\n        ref={inputRef}\r\n      />\r\n      <button className='Button' onClick={clearInputValue}>\r\n        Очистить\r\n      </button>\r\n      <button className='Button' onClick={handleOnClick}>\r\n        Добавить\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"../../App.css\";\r\n\r\nexport const Card = ({ city }) => (\r\n  <div className='Card'>\r\n    <div className='MainInfo'>\r\n      <img\r\n        className='Icon'\r\n        src='http://openweathermap.org/img/wn/10d@2x.png'\r\n        alt='icon'\r\n      />\r\n      <div className='Title'>{city}</div>\r\n      <div className='Description'>Cloudy</div>\r\n      <div className='Temperature'>20</div>\r\n    </div>\r\n    <div className='Information'>\r\n      <div>Humidity: 15</div>\r\n      <div>Feels like: 19</div>\r\n    </div>\r\n  </div>\r\n);\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { Input } from \"./components/Input/Input\";\r\nimport { Card } from \"./components/Card/Card\";\r\n\r\nfunction App() {\r\n  const [citiesList, setCitiesList] = useState([]);\r\n  return (\r\n    <div className='Main'>\r\n      <Input setCitiesList={setCitiesList} />\r\n      <div className='CardList'>\r\n        {citiesList.map((city) => (\r\n          <Card key={city} city={city} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}