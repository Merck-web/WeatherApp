{"version":3,"sources":["hooks/useCitiesList.js","components/Input/Input.jsx","components/Card/Card.jsx","hooks/useWeather.js","settings.js","components/CardList/CardList.jsx","App.js","reportWebVitals.js","index.js"],"names":["initialState","citiesList","JSON","parse","localStorage","getItem","reducer","state","action","type","payload","newArray","filter","el","Input","dispatch","useState","inputValue","setInputValue","inputRef","useRef","className","onChange","event","target","value","ref","onClick","current","focus","Card","memo","city","data","setData","useEffect","fetch","process","then","res","json","useWeather","name","weather","main","description","icon","temp","humidity","feels_like","src","alt","toFixed","CardList","map","App","useReducer","setItem","stringify","useCitiesList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e959c72d.chunk.js","sourcesContent":["import { useEffect, useReducer } from \"react\";\r\n\r\nconst initialState = {\r\n  citiesList: JSON.parse(localStorage.getItem(\"citiesList\")) || [],\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_CITY\": {\r\n      const newState = {\r\n        ...state,\r\n        citiesList: [...state.citiesList, action.payload],\r\n      }; //переопределяем citiesList на  [...state.citiesList, action.payload]\r\n      return newState;\r\n    }\r\n    case \"REMOVE_CITY_CARD\": {\r\n      const oldArray = state.citiesList;\r\n      const newArray = oldArray.filter((el) => el !== action.payload);\r\n      return {...state, citiesList: newArray};\r\n    }\r\n    default:\r\n      return initialState;\r\n  }\r\n};\r\n\r\nexport const useCitiesList = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const { citiesList } = state;\r\n  useEffect(() => {\r\n    localStorage.setItem(\"citiesList\", JSON.stringify(citiesList));\r\n  }, [citiesList]);\r\n  return [citiesList, dispatch];\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\n\r\nimport \"../../App.css\";\r\n\r\nexport const Input = ({ dispatch }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const handleOnChange = (event) => {\r\n    setInputValue(event.target.value); //берем value из input в переменную inputValue\r\n  };\r\n  const handleOnClick = () => {\r\n    // setCitiesList((curentArray) => [...curentArray, inputValue]); //создаем новый массив который наполняется предыдущим + новое значени inputValue\r\n    dispatch({\r\n      type: 'ADD_CITY',\r\n      payload: inputValue\r\n    })\r\n    inputRef.current.focus();\r\n    setInputValue(\"\");\r\n  };\r\n  const clearInputValue = () => {\r\n    setInputValue(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div className='InputWrap'>\r\n      <input\r\n        className='Input'\r\n        onChange={handleOnChange}\r\n        value={inputValue}\r\n        ref={inputRef}\r\n      />\r\n      <button className='Button' onClick={clearInputValue}>\r\n        Очистить\r\n      </button>\r\n      <button className='Button' onClick={handleOnClick}>\r\n        Добавить\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { memo } from \"react\";\r\nimport { useWeather } from \"../../hooks/useWeather\";\r\n\r\nimport \"../../App.css\";\r\n\r\nexport const Card = memo(({ city, dispatch }) => {\r\n  const data = useWeather(city);\r\n\r\n  const removeCityCard = () => {\r\n    dispatch({\r\n      type: \"REMOVE_CITY_CARD\",\r\n      payload: city,\r\n    });\r\n  };\r\n\r\n  if (!data) return null;\r\n  const { name, weather, main } = data;\r\n  const { description, icon } = weather[0];\r\n  const { temp, humidity, feels_like } = main;\r\n  return (\r\n    <div className='Card'>\r\n      <div className='action-btn'>\r\n        <button onClick={removeCityCard} className='delete-btn'>\r\n          X\r\n        </button>\r\n      </div>\r\n      <div className='MainInfo'>\r\n        <img\r\n          className='Icon'\r\n          src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n          alt='icon'\r\n        />\r\n        <div className='Title'>{name}</div>\r\n        <div className='Description'>{description}</div>\r\n        <div className='Temperature'>{temp.toFixed()}</div>\r\n      </div>\r\n      <div className='Information'>\r\n        <div>Humidity: {humidity}</div>\r\n        <div>Feels like: {feels_like}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { useEffect, useState } from \"react\";\r\nimport { API_KEY, API_URL } from \"../settings\";\r\n\r\nexport const useWeather = (city) => {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    fetch(\r\n      `${API_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang={ru}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then(setData);\r\n  }, [city]);\r\n  return data;\r\n};\r\n","const API_KEY = process.env.REACT_APP_API_KEY;\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nexport { API_KEY, API_URL };\r\n","import React from \"react\";\r\nimport { Card } from \"../Card/Card\";\r\nimport \"../../App.css\";\r\n\r\nexport const CardList = ({ citiesList, dispatch }) => {\r\n  return (\r\n    <div className='CardList'>\r\n      {citiesList.map((city) => (\r\n        <Card key={city} city={city} dispatch={dispatch}  />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport { useCitiesList } from \"./hooks/useCitiesList\";\r\n\r\nimport { Input } from \"./components/Input/Input\";\r\nimport { CardList } from \"./components/CardList/CardList\";\r\n\r\nfunction App() {\r\n  const [citiesList, dispatch] = useCitiesList();\r\n  return (\r\n    <div className='Main'>\r\n      <Input dispatch={dispatch} />\r\n      <div className='CardList'>\r\n        {<CardList citiesList={citiesList} dispatch={dispatch} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}